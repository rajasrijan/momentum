/*
 * Copyright 2009-2021 Srijan Kumar Sharma
 *
 * This file is part of Momentum.
 *
 * Momentum is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Momentum is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Momentum.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "global.h"
#include "timer.h"
#include "mm.h"
#include "paging.h"
#include "acpi.h"
#include "apic.h"
#include "stdlib.h"
#include "cpu.h"
#include "keyboard.h"
#include <kernel/multitask.h>
#include "stdio.h"
#include "string.h"
#include <kernel/vfs.h>
#include <kernel/vnode.h>
#include <kernel/sys_info.h>
#include "pci.h"
#include "../../DDI/pci_driver.h"
#include <DDI/driver.h>
#include <string>
#include <list>
#include <map>
#include <unistd.h>
#include <kernel/binary_loader.h>
#include "descriptor_tables.h"
#include <arch/video.h>
#include <arch/x86_64/rtc.h>
#include <memory>
#include <kernel/gui.h>
#include <kernel/logging.h>
#include <kernel/kernel_shell.h>

#ifdef __cplusplus
extern "C"
{
#endif
#include <acexcep.h>
#include <aclocal.h>
#include <acnamesp.h>
#include <acobject.h>
#include <acpi.h>
#include <acstruct.h>
#include <actbl.h>
#include <actypes.h>
#include <platform/acenv.h>
#ifdef __cplusplus
}
#endif

const char copyright[] = "Momentum Copyright (C) 2009-2020 Srijan Kumar Sharma\n"
                         "This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n"
                         "This is free software, and you are welcome to redistribute it\n"
                         "under certain conditions; type `show c' for details.\n";

void *t1(void *arg);
void *pnpHotPlug(void *arg);
extern uint32_t stack;
extern "C" uint64_t __CTOR_LIST__;
extern "C" uint64_t __CTOR_END__;
char kernel_cmdline[4096] = {0};

int decode_commandline_args(const char *cmdline, [[maybe_unused]] map<string, string> &args);
int decode_commandline_args(const char *cmdline, [[maybe_unused]] map<string, string> &args)
{
    const char *start_ptr = cmdline;
    const char *end_ptr = nullptr;
    while ((end_ptr = strchar(cmdline, ',')))
    {
        char tmp[256] = {0};
        std::copy(start_ptr, end_ptr, tmp);
    }
    return 0;
}

void decode_cmdline(char *cmdLine)
{
    auto arg = strtok(cmdLine, "= ");
    while (arg != nullptr)
    {
        if (!stricmp("uuid", arg))
        {
            arg = strtok(nullptr, "= ");
            sys_info.root_drive_uuid = std::to_uuid(arg);
        }
        arg = strtok(nullptr, "= ");
    }
}

int initilize_kernel_cmdline()
{
    return 0;
}

void stage2()
{
    //	GDT, IDT and Paging initialized before anything else
    if (init_gdt())
    {
        printf("global descriptor initialize failed\n");
        __asm__("cli;hlt;");
    }

    if (init_idt())
    {
        printf("interrupt initialize failed\n");
        __asm__("cli;hlt;");
    }

    if (initilize_memorymanager())
    {
        printf("memory manager initialize failed\n");
        __asm__("cli;hlt;");
    }

    if (PageManager::initialize())
    {
        printf("Paging initialize failed\n");
        __asm__("cli;hlt;");
    }

    if (init_video())
    {
        printf("framebuffer initialize failed\n");
        __asm__("cli;hlt;");
    }
    if (initilize_kernel_cmdline())
    {
        printf("kernel command line initialize failed\n");
        __asm__("cli;hlt;");
    }

    if (create_kernel_heap())
    {
        printf("Kernel heap initialize failed\n");
        __asm__("cli;hlt;");
    }

    if (get_acpi_tables())
    {
        printf("ACPI table failed\n");
        __asm__("cli;hlt;");
    }
    // init_rtc();
    __asm__("cli;");
    init_apic_timer(0x001FFFFF);
    init_keyboard();
    uint64_t noOfConstructors = (uint64_t)(&__CTOR_END__ - &__CTOR_LIST__);
    printf("No of constructors: %x\n", noOfConstructors);
    for (uint64_t i = 0; i < noOfConstructors; i++)
    {
        printf("calling...[%lx]\n", (&__CTOR_LIST__)[i]);
        void (*constructor_fn)(void) = (void (*)(void))(&__CTOR_LIST__)[i];
        constructor_fn();
    }
    init_multitask();

    // if (init_symmetric_multi_processor())
    // {
    //     printf("SMP init failed\n");
    //     __asm__("cli;hlt;");
    // }

    auto kthread = multitask::getInstance()->getKernelThread();
    change_thread(kthread, true);
}

void *t1([[maybe_unused]] void *arg)
{
    setColor(0x000F0FFF);
    const char logo[] = {
        0x0A, 0x0A, 0x20, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x7C, 0x20, 0x7C,
        0x20, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x7C, 0x20, 0x7C, 0x20, 0x20, 0x7C, 0x20, 0x7C,
        0x20, 0x5F, 0x5F, 0x5F, 0x7C, 0x20, 0x7C, 0x20, 0x5F, 0x5F, 0x5F, 0x20, 0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x5F, 0x20, 0x5F, 0x5F, 0x20, 0x5F, 0x5F, 0x5F,
        0x20, 0x20, 0x20, 0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x7C, 0x20, 0x7C, 0x2F, 0x5C, 0x7C, 0x20, 0x7C, 0x2F, 0x20, 0x5F, 0x20, 0x5C,
        0x20, 0x7C, 0x2F, 0x20, 0x5F, 0x5F, 0x2F, 0x20, 0x5F, 0x20, 0x5C, 0x7C, 0x20, 0x27, 0x5F, 0x20, 0x60, 0x20, 0x5F, 0x20, 0x5C, 0x20, 0x2F, 0x20, 0x5F,
        0x20, 0x5C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x5C, 0x20, 0x20, 0x2F, 0x5C, 0x20, 0x20, 0x2F, 0x20, 0x20, 0x5F, 0x5F, 0x2F, 0x20, 0x7C, 0x20, 0x28, 0x5F,
        0x7C, 0x20, 0x28, 0x5F, 0x29, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x20, 0x5F, 0x5F, 0x2F, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x0A, 0x20, 0x5C, 0x2F, 0x20, 0x20, 0x5C, 0x2F, 0x20, 0x5C, 0x5F, 0x5F, 0x5F, 0x7C, 0x5F, 0x7C, 0x5C, 0x5F, 0x5F, 0x5F, 0x5C, 0x5F, 0x5F, 0x5F,
        0x2F, 0x7C, 0x5F, 0x7C, 0x20, 0x7C, 0x5F, 0x7C, 0x20, 0x7C, 0x5F, 0x7C, 0x5C, 0x5F, 0x5F, 0x5F, 0x7C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x20,
        0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x20, 0x0A, 0x7C, 0x20, 0x20, 0x5C, 0x2F, 0x20, 0x20, 0x7C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x20, 0x5F, 0x20, 0x20, 0x2F, 0x20, 0x20, 0x5F, 0x5F, 0x5F,
        0x7C, 0x0A, 0x7C, 0x20, 0x2E, 0x20, 0x20, 0x2E, 0x20, 0x7C, 0x20, 0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x5F, 0x20, 0x5F, 0x5F, 0x20, 0x5F, 0x5F, 0x5F, 0x20,
        0x20, 0x20, 0x5F, 0x5F, 0x5F, 0x20, 0x5F, 0x20, 0x5F, 0x5F, 0x20, 0x7C, 0x20, 0x7C, 0x5F, 0x20, 0x5F, 0x20, 0x20, 0x20, 0x5F, 0x20, 0x5F, 0x20, 0x5F,
        0x5F, 0x20, 0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x5C, 0x20, 0x60, 0x2D, 0x2D, 0x2E, 0x20, 0x0A, 0x7C, 0x20, 0x7C,
        0x5C, 0x2F, 0x7C, 0x20, 0x7C, 0x2F, 0x20, 0x5F, 0x20, 0x5C, 0x7C, 0x20, 0x27, 0x5F, 0x20, 0x60, 0x20, 0x5F, 0x20, 0x5C, 0x20, 0x2F, 0x20, 0x5F, 0x20,
        0x5C, 0x20, 0x27, 0x5F, 0x20, 0x5C, 0x7C, 0x20, 0x5F, 0x5F, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x27, 0x5F, 0x20, 0x60, 0x20, 0x5F, 0x20,
        0x5C, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x60, 0x2D, 0x2D, 0x2E, 0x20, 0x5C, 0x0A, 0x7C, 0x20, 0x7C, 0x20, 0x20, 0x7C, 0x20, 0x7C,
        0x20, 0x28, 0x5F, 0x29, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x20, 0x5F, 0x5F, 0x2F, 0x20, 0x7C, 0x20, 0x7C,
        0x20, 0x7C, 0x20, 0x7C, 0x5F, 0x7C, 0x20, 0x7C, 0x5F, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x5C, 0x20,
        0x5C, 0x5F, 0x2F, 0x20, 0x2F, 0x5C, 0x5F, 0x5F, 0x2F, 0x20, 0x2F, 0x0A, 0x5C, 0x5F, 0x7C, 0x20, 0x20, 0x7C, 0x5F, 0x2F, 0x5C, 0x5F, 0x5F, 0x5F, 0x2F,
        0x7C, 0x5F, 0x7C, 0x20, 0x7C, 0x5F, 0x7C, 0x20, 0x7C, 0x5F, 0x7C, 0x5C, 0x5F, 0x5F, 0x5F, 0x7C, 0x5F, 0x7C, 0x20, 0x7C, 0x5F, 0x7C, 0x5C, 0x5F, 0x5F,
        0x7C, 0x5C, 0x5F, 0x5F, 0x2C, 0x5F, 0x7C, 0x5F, 0x7C, 0x20, 0x7C, 0x5F, 0x7C, 0x20, 0x7C, 0x5F, 0x7C, 0x20, 0x20, 0x5C, 0x5F, 0x5F, 0x5F, 0x2F, 0x5C,
        0x5F, 0x5F, 0x5F, 0x5F, 0x2F, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x0A, 0x00};
    printf(logo);
    setColor(0x00FFFFFF);
    return 0;
}

/*
 * Plug 'n' Play Hardware detector thread.
 */
void *pnpHotPlug([[maybe_unused]] void *arg)
{
    //	PCI device detection loop
    while (true)
    {
        sleep(100);
        printf("Checking for PnP devices\n");
        std::vector<pci_device_t> &deviceList = pci_getDevices();
        for (pci_device_t &device : deviceList)
        {
            if (!device.bIsProcessed)
            {
                pci_find_compitable_driver(device);
            }
        }
    }
    return 0;
}
/*
 * kernel thread
 */
void state_c0()
{
    int ret = 0;
    printf("Kernal thread started.\n");
    ret = initialize_full_acpi();
    if (ret != 0)
    {
        printf("ACPI initialization failed\n");
        __asm__("cli;hlt;");
    }

    pci_init_devices();
    init_vfs();
    init_drivers();
    printf("Checking for PnP devices\n");
    std::vector<pci_device_t> &deviceList = pci_getDevices();
    for (pci_device_t &device : deviceList)
    {
        if (!device.bIsProcessed)
        {
            pci_find_compitable_driver(device);
        }
    }
    thread_t pnp_hotplug_thread = nullptr;
    multitask::getInstance()->createKernelThread(pnp_hotplug_thread, "pnp_hotplug_thread", &t1, (void *)0);
    
    sleep(10);
    printf(copyright);
    kernel_shell();
    while (1)
    {
        __asm__("hlt;");
    }
}
