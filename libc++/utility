/*
 * Copyright 2009-2020 Srijan Kumar Sharma
 * 
 * This file is part of Momentum.
 * 
 * Momentum is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Momentum is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Momentum.  If not, see <http://www.gnu.org/licenses/>.
 */
#pragma once
#include <type_traits>
namespace std
{
	template <typename T>
	typename remove_reference<T>::type &&move(T &&arg)
	{
		return static_cast<typename remove_reference<T>::type &&>(arg);
	}

	template <class T1, class T2>
	struct pair
	{
		T1 first;
		T2 second;
		constexpr pair() {}
		constexpr pair(const T1 &x, const T2 &y);
		template <class U1, class U2>
		constexpr pair(U1 &&x, U2 &&y) : first(move(x)), second(move(y)) {}
		template <class U1, class U2>
		constexpr pair(const pair<U1, U2> &p);
		template <class U1, class U2>
		constexpr pair(pair<U1, U2> &&p);
		pair(const pair &p) = default;
		pair(pair &&p) = default;
		constexpr pair &operator=(const pair &p)
		{
			first = p.first;
			second = p.second;
			return *this;
		}
		template <class U1, class U2>
		constexpr pair &operator=(const pair<U1, U2> &r);
		constexpr pair &operator=(pair &&r) noexcept
		{
			first = r.first;
			second = r.second;
			return *this;
		}
		template <class U1, class U2>
		constexpr pair &operator=(pair<U1, U2> &&r);
	};

	template <class T1, class T2>
	pair<T1, T2> make_pair(T1 x, T2 y)
	{
		return pair<T1, T2>(x, y);
	}
} // namespace std
